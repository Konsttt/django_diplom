# Это часть запросов вручную, использовалась в процессе разработки.
# Затем все тесты переведены в pytest. Запуск тестов в (venv), при запущенном проекте: pytest --cov=backend
############################################################################################################

# регистрация пользователя (менеджера магазина из пользователя безопасно делать в админке джанго)
POST http://localhost:8000/api/v1/user/register
Content-Type: application/json

{
  "first_name": "Иван",
  "last_name": "Иванов",
  "email": "user1@tips-tricks.ru",
  "password": "888Xxx444~",
  "company": "SpaceY",
  "position": "python backend"
}

###

# подтверждение регистрации по ссылке на почте
# значение токена взять из БД из таблицы confirmemailtoken
GET http://localhost:8000/api/v1/user/register/confirm?token=556c6d1de765bdb3eb8d&email=user1@tips-tricks.ru

###

# аутентификация пользователя (login)
POST http://192.168.66.75:8000/api/v1/user/login
Content-Type: application/json

{
  "email": "user1@tips-tricks.ru",
  "password": "Qqq111!!!"
}

###

# выход пользователя (logout)
# Сначала использовал GET, но браузер думает, что снова заходим на эту страницу - не корректно, поэтому POST
# https://stackoverflow.com/questions/3521290/logout-get-or-post
POST http://localhost:8000/api/v1/user/logout
Authorization: Token 3456500386ca40dc24a9d62c20fb6f0e79c9747c  # токен взять из БД из таблицы authtoken_token

###

# user details (просмотр своих данных)
GET http://localhost:8000/api/v1/user/details
Authorization: Token 556c6d1de765bdb3eb8d  # токен взять из БД из таблицы authtoken_token

###

# user details (редактирование своих данных)
POST http://localhost:8000/api/v1/user/details
Authorization: Token 40e578c55750437e1c18393d2e41e1cedd41e560  # токен взять из БД из таблицы authtoken_token
Content-Type: application/json

{
  "company": "Связной"
}
###


# user contact (добавить новый контакт)
POST http://192.168.66.75:8000/api/v1/user/contact/
Authorization: Token a6229242707797b554268dfc121082a47b2b75f3  # токен взять из БД из таблицы authtoken_token
Content-Type: application/json

{
  "city": "Пенза1",
  "street": "Живописная1",
  "house": "51",
  "phone": "9876543331"
}

###

# user contact (просмотр своего контакта (контактов))
GET http://localhost:8000/api/v1/user/contact
Authorization: Token c5a064b64830300ffd9d202d3c101f80cc1d71e2  # токен взять из БД из таблицы authtoken_token

###

# user contact (редактирование своего контакта). id передаётся строкой из цифр!
PATCH http://localhost:8000/api/v1/user/contact
Authorization: Token c5a064b64830300ffd9d202d3c101f80cc1d71e2  # токен взять из БД из таблицы authtoken_token
Content-Type: application/json

{
  "id": "2",
  "house": "7",
  "phone": "89161112233"
}

###

# user contact (удаление своего контакта или сразу нескольких своих контактов)
# id удаляемых контактов указываеются через запятую с пробелом в параметре items"
DELETE http://localhost:8000/api/v1/user/contact
Authorization: Token c5a064b64830300ffd9d202d3c101f80cc1d71e2  # токен взять из БД из таблицы authtoken_token
Content-Type: application/json

{
  "items": "11, 12, 13"
}

###

# запрос на сброс пароля reset_password_request_token
# на почту приходит новый токен
POST http://localhost:8000/api/v1/user/password_reset
Authorization: Token c5a064b64830300ffd9d202d3c101f80cc1d71e2
Content-Type: application/json

{
  "email": "user1@tips-tricks.ru"
}

###

# сброс пароля токеном из почты из предыдущего запроса
POST http://localhost:8000/api/v1/user/password_reset/confirm
Authorization: Token c5a064b64830300ffd9d202d3c101f80cc1d71e2
Content-Type: application/json

{
  "token": "730c7f1616",
  "password": "Qqq111!!!"
}

###

# регистрируем изначально менеджера как пользователя. далее активация через почту и в админке выставляем ему менеджера.
POST http://localhost:8000/api/v1/user/register
Content-Type: application/json

{
  "first_name": "Игнат",
  "last_name": "Игнатов",
  "email": "manager2@tips-tricks.ru",
  "password": "Qqq111!!!",
  "company": "Ozon",
  "position": "manager"
}

###

# аутентификация менеджера (login)
POST http://localhost:8000/api/v1/user/login
Content-Type: application/json

{
  "email": "manager2@tips-tricks.ru",
  "password": "Qqq111!!!"
}

###

# GET upload_file
# (Если в брауезере, то откроется форма для загрузки файла со своего компьютера в БД.
# В форме два окна ввода - name и file - имя файла и собственно открывается диалоговое окно на выбор файла из Проводника,
# два поля user и email - скрыты и заполняются при инициализации формы по Токену. На эту страничку, если в браузере, есть
# доступ только у менеджеров. В БД в таблицу uploadfiles записывается строка с именем, владельцем файла, путём в папку медиа,
# файл сохраняется в папку медиа.
# !!! Пытался работать через браузер, открывать форму - но оказывается django в целях безопасности не хранит токен с localhost,
# т.е. логинюсь, всё хорошо, но по новому адресу - ты уже не авторизован, вот объяснение этому https://code.djangoproject.com/ticket/10560
# Решение - если только сервер на vps развернуть для тестирования. А так через POSTMAN - все запросы и токены, всё работает.
# !!! Проверять через Postman
# :) Кажется это решилось: или то, что стал использовать функцию login(request, user)
# или из за того, что перевёл проект на wsl Ubuntu, а он генерирует удалённый ip-шник.
GET http://localhost:8000/api/v1/partner/upload_file
Authorization: Token c09d17d206d656e781b30e7651c2

###

# загрузка менеджером файла с товарами в БД
# !!! работа с формой заргузки файла в БД - только в POSTMAN (через браузер localhost не хранит токен)
POST http://localhost:8000/api/v1/partner/upload_file/
Authorization: Token 40e578c55750437e1c18393d2e41e1cedd41e560
# данные, загружаемые через форму, в Postman загружаеются на вкладке form-data
# Где имя файла тип поля выбирается - Text, где непосредственно сам файл - File

###

# обновление прайса менеджером (загрузка в БД товаров магазина)
# в url-e указать нужный файл с товарами
POST http://localhost:8000/api/v1/partner/update
Authorization: Token c09d17d206d656e781b30e7651c2
Content-Type: application/json

{
  "url": "http://localhost:8000/api/v1/media/files/ozon.yaml"
}

###

# Просмотр своих магазинов менеджером. Изменение статуса магазина state True - по умолчанию/False (в работе/не в работе)
GET http://localhost:8000/api/v1/partner/state
Authorization: Token c09d17d206d656e781b30e7651c2

###

# Изменение менеджером статуса state у своего магазина True/False (в работе/не в работе). По умолчанию стоит True
POST http://localhost:8000/api/v1/partner/state
Authorization: Token 40e578c55750437e1c18393d2e41e1cedd41e560
Content-Type: application/json

{
  "state": "False"
}

###

# Просмотр всех магазинов
GET http://localhost:8000/api/v1/shops
Authorization: Token b295f813d6a27bab77959c8183264df36dbf785d

###

# Просмотр всех категорий
GET http://localhost:8000/api/v1/categories
Authorization: Token b295f813d6a27bab77959c8183264df36dbf785d

###

# Поиск товаров по магазину и/или категории
GET http://localhost:8000/api/v1/products?category_id=224
Authorization: Token b295f813d6a27bab77959c8183264df36dbf785d

###

# Создание/наполнение корзины (создаётся запись в Orders и записи в промежуточной таблице OrderItems)
POST http://192.168.69.157:8000/api/v1/basket
Authorization: Token 0834d1dc1f6a2fd68c748bc2995efb5
Content-Type: application/json

{
  "items": "[{\"product_info\": 10, \"quantity\": 10}, {\"product_info\": 12, \"quantity\": 7}]"
}

###

# Удаление товаров из корзины (удаление записей из OrderItem)
# в items передаём строку, где через запятую идут id записей из OrderItem, которые хотим удалить
DELETE http://localhost:8000/api/v1/basket
Authorization: Token b295f813d6a27bab77959c8183264df36dbf785d
Content-Type: application/json

{
  "items": "6"
}

###

# Изменение кол-ва единиц определённого товара/товаров в корзине
# Изменяем quantity у записи OrderItem
PUT http://localhost:8000/api/v1/basket
Authorization: Token b295f813d6a27bab77959c8183264df36dbf785d
Content-Type: application/json

{
  "items": "[{\"id\": 5, \"quantity\": 10}]"
}

###

# Получить корзину (просмотр своей корзины)
GET http://localhost:8000/api/v1/basket
Authorization: Token b295f813d6a27bab77959c8183264df36dbf785d

###

# Оформление заказа из корзины (в json запросе передаются id-корзины и id-адреса_доставки_пользователя,
# т.к. корзин и контактво может быть у пользователя несколько)
# У заказа статус меняется на new, на почту пользователю отправляется письмо - что заказ оформлен.
# (Небольшой нюанс: id корзины передаётся строкой, id контакта - числом.)
POST http://192.168.69.157:8000/api/v1/order
Authorization: Token 0834d1dc1f6a2fd68c748bc2995efb5
Content-Type: application/json

{
  "id": "1",
  "contact": 1
}

###

# Просмотр всех своих заказов
GET http://localhost:8000/api/v1/order
Authorization: Token b295f813d6a27bab77959c8183264df36dbf785d

###

# Просмотр(получение) заказов поставщиками (менеджер1 - Связной)
GET http://localhost:8000/api/v1/partner/orders
Authorization: Token 40e578c55750437e1c18393d2e41e1cedd41e560

###

# Просмотр(получение) заказов поставщиками (менеджер2 - Ozon)
GET http://localhost:8000/api/v1/partner/orders
Authorization: Token c09d17d206d656e781b30e7651c2

###

# Получение кода
GET https://oauth.yandex.ru/authorize?response_type=code&client_id=12a1d081be78469a8269c5627444b0d9

###

POST https://oauth.yandex.ru/token
Content-Type: application/json

{"code": "3907007",
  "client_id": "12a1d081be78469a8269c5627444b0d9",
  "client_secret": "fca6da9b65c34d6ca0bcef4c47c1d669",
  "grant_type": "authorization_code"}

###

# Получение данных с yandex
GET https://login.yandex.ru/info?format=json
Authorization: OAuth y0_AgAAAAAEICnAAAoJRwAAAADlX3pJ3oKcaMezQvaPDcRGitJt5VX2JIo